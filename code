# create graphs of each coordinator showing # of interviews scheduled each week (Sun-Fri 4pm)

# import packages
import pandas as pd
import os
import matplotlib.pyplot as plt
import re
from matplotlib import dates #to set x axis date interval to every 7 days

from google.colab import files
#uploaded = files.upload()

#setup folder & files
directory = 'drive/MyDrive/data/gh usage'
folder = os.listdir(directory)
coordinators = sorted([coordinator for coordinator in folder]) #slice out py.checkpoint

save_graphs = input('Save graphs as png?')

#compile all weekly gh usage report for each coordinator (folder)
for coordinator in coordinators:
  all_weeks = pd.DataFrame()
  #list all files in the coordinator's folder
  docs = [doc for doc in os.listdir(directory + '/' + coordinator)]
  
  #add all excel files into 1 df
  for doc in docs:
    df = pd.read_excel(directory + '/' + coordinator + '/' + doc, header=3)
    #create date column
    df['date'] = doc[-15:].split('.')[0]
    all_weeks = pd.concat([all_weeks, df])

  #grab name from folder name
  name = re.split('\(|\)', coordinator)[1]
  all_weeks.to_csv(name + '.csv', index=False)
  all_data = pd.read_csv(name + '.csv')

  df_Coordinator = all_data.loc[all_data['User'] == name]
  df_Coordinator['date'] = pd.to_datetime(df_Coordinator['date'])
  df_Coordinator = df_Coordinator.sort_values(by='date')

  plt.rcParams["figure.figsize"]=(13,6)
  fig = plt.figure()
  ax = fig.add_subplot()

  plt.title(name)
  plt.grid(axis='y')
  plt.xlabel('Week ending')
  plt.ylabel('Interviews Scheduled')
  plt.plot(df_Coordinator['date'], df_Coordinator['Interviews Scheduled'], label='Interviews Scheduled')
  plt.xticks(rotation=90)
  plt.xticks(df_Coordinator['date'])

  #annotate each dot with value +1 on the y-axis
  for i,j in zip(df_Coordinator['date'],df_Coordinator['Interviews Scheduled']):
      ax.annotate(str(j),xy=(i,j+1))

  #add moving average line
  df_Coordinator[ 'rolling_avg' ] = df_Coordinator['Interviews Scheduled'].rolling(4).mean()
  plt.plot(df_Coordinator['date'], df_Coordinator['rolling_avg'], label='Moving Average (4)')

  ax.legend(loc='upper left')
  
  if save_graphs == 'Yes':
    plt.savefig(name + '.png', bbox_inches='tight')
    files.download(name + '.png')
  else:
    pass

  plt.show()
